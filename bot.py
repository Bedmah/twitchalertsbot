import logging
import requests
import json
import asyncio
import os
from datetime import datetime
from os.path import exists
from telegram import ReplyKeyboardMarkup, KeyboardButton, Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TELEGRAM_TOKEN = '–¢–í–û–ô –¢–û–ö–ï–ù –¢–ì'
TWITCH_CLIENT_ID = 'TWITCH API'
TWITCH_CLIENT_SECRET = '–¢–≤–æ–π Twitch Secret Code'
TWITCH_USER_LOGIN = '–ù–∏–∫ Twitch'
CHECK_INTERVAL = 5  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∏–º–∞ (—Å–µ–∫)
SUBSCRIBERS_FILE = 'subscribers.json'
USERS_DIR = 'users'
ADMINS_FILE = 'admins.json'  # –§–∞–π–ª —Å ID –∞–¥–º–∏–Ω–æ–≤

LINKS_MESSAGE = (
    "üìé <b>–ú–æ–∏ —Ä–µ—Å—É—Ä—Å—ã</b>:\n"
    "üåê <b>–°–∞–π—Ç</b> ‚Äî https://bedmah.ru/\n"
    "üéÆ <b>Twitch</b> ‚Äî https://www.twitch.tv/fakebedmah\n"
    "üì¢ <b>Telegram –∫–∞–Ω–∞–ª</b> ‚Äî https://t.me/bedmah\n"
    "üé≠ <b>TikTok</b> ‚Äî https://www.tiktok.com/@bedmah\n"
    "üí¨ <b>Telegram (–ª–∏—á–Ω—ã–π)</b> ‚Äî https://t.me/fakebedmah\n"
    "üìò <b>VK</b> ‚Äî https://vk.com/egrvkid\n"
    "üì∫ <b>YouTube</b> ‚Äî https://www.youtube.com/@dontbedmah\n"
    "üíª <b>–°–∫—Ä–∏–ø—Ç—ã</b> ‚Äî https://tech.bedmah.ru/"
)

os.makedirs(USERS_DIR, exist_ok=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_admins():
    if exists(ADMINS_FILE):
        with open(ADMINS_FILE, 'r') as f:
            return set(json.load(f))
    return set()

admins = load_admins()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
def load_subscribers():
    if exists(SUBSCRIBERS_FILE):
        with open(SUBSCRIBERS_FILE, 'r') as f:
            return set(json.load(f))
    return set()

def save_subscribers(subs):
    with open(SUBSCRIBERS_FILE, 'w') as f:
        json.dump(list(subs), f)

subscribers = load_subscribers()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def format_user_info(user):
    return f"{user.full_name} | @{user.username} | ID: {user.id}"

def log_user_action(user, message):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    user_log = os.path.join(USERS_DIR, f"{user.id}.txt")
    with open(user_log, "a", encoding="utf-8") as f:
        f.write(f"[{now}] {format_user_info(user)} | {message}\n")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "Admin" –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
def get_keyboard(is_subscribed=False, is_admin=False):
    buttons = []
    if is_subscribed:
        buttons.append([KeyboardButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")])
    else:
        buttons.append([KeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")])
    buttons.append([KeyboardButton("üìé –í—Å–µ —Å—Å—ã–ª–∫–∏")])
    if is_admin:
        buttons.append([KeyboardButton("üîê Admin")])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# Twitch API
def get_twitch_token():
    url = 'https://id.twitch.tv/oauth2/token'
    params = {
        'client_id': TWITCH_CLIENT_ID,
        'client_secret': TWITCH_CLIENT_SECRET,
        'grant_type': 'client_credentials'
    }
    response = requests.post(url, params=params).json()
    return response['access_token']

def is_stream_live(token):
    headers = {
        'Client-ID': TWITCH_CLIENT_ID,
        'Authorization': f'Bearer {token}'
    }
    url = f'https://api.twitch.tv/helix/streams?user_login={TWITCH_USER_LOGIN}'
    response = requests.get(url, headers=headers).json()
    return len(response.get('data', [])) > 0

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_user_action(user, "üü¢ /start")
    subscribed = user.id in subscribers
    is_admin = user.id in admins
    status = "‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã." if subscribed else "‚ùå –í—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã."
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        f"–Ø —É–≤–µ–¥–æ–º–ª—é —Ç–µ–±—è, –∫–æ–≥–¥–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —Å—Ç—Ä–∏–º –Ω–∞ Twitch üé•\n\n"
        f"{status}\n\n‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=get_keyboard(subscribed, is_admin)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_user_action(user, "üÜò /help")
    base_help = (
        "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "/status ‚Äî –≤–∞—à —Å—Ç–∞—Ç—É—Å\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ ‚¨á"
    )
    admin_help = (
        "\n\n<b>Admin –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/admin_list ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
        "/admin_logs <user_id> ‚Äî –ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/admin_notify ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö\n"
    )
    msg = base_help + (admin_help if user.id in admins else "")
    await update.message.reply_html(msg)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    log_user_action(user, "‚Ñπ /status")
    if user.id in subscribers:
        await update.message.reply_text(f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã.\nüë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")
    else:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è' –Ω–∏–∂–µ.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    text = update.message.text.strip()
    subscribed = user.id in subscribers
    is_admin = user.id in admins

    if text == "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è":
        if subscribed:
            await update.message.reply_text("üìå –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.", reply_markup=get_keyboard(True, is_admin))
            log_user_action(user, "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
        else:
            subscribers.add(user.id)
            save_subscribers(subscribers)
            await update.message.reply_text("üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!", reply_markup=get_keyboard(True, is_admin))
            log_user_action(user, "‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è")

    elif text == "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è":
        if not subscribed:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.", reply_markup=get_keyboard(False, is_admin))
            log_user_action(user, "–û—Ç–ø–∏—Å–∫–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏")
        else:
            subscribers.discard(user.id)
            save_subscribers(subscribers)
            await update.message.reply_text("üò¢ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", reply_markup=get_keyboard(False, is_admin))
            log_user_action(user, "‚ùå –û—Ç–ø–∏—Å–∞–ª—Å—è")

    elif text == "üìé –í—Å–µ —Å—Å—ã–ª–∫–∏":
        await update.message.reply_html(LINKS_MESSAGE, disable_web_page_preview=True, reply_markup=get_keyboard(subscribed, is_admin))
        log_user_action(user, "üìé –ó–∞–ø—Ä–æ—Å–∏–ª —Å—Å—ã–ª–∫–∏")

    elif text == "üîê Admin" and is_admin:
        await show_admin_menu(update, context)
        log_user_action(user, "–û—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∞–¥–º–∏–Ω–∞")

    else:
        await update.message.reply_text("‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=get_keyboard(subscribed, is_admin))
        log_user_action(user, f"‚ö† –ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –≤–≤–æ–¥: {text}")

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton("/admin_list")],
        [KeyboardButton("/admin_logs")],
        [KeyboardButton("/admin_notify")],
        [KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)
    await update.message.reply_text("üîê –ê–¥–º–∏–Ω –º–µ–Ω—é:\n/admin_list ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n/admin_logs <user_id> ‚Äî –ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/admin_notify ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö\n\n–ù–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ '‚¨Ö –ù–∞–∑–∞–¥' —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.", reply_markup=keyboard)

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã

async def admin_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id not in admins:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    log_user_action(user, "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
    if not subscribers:
        await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—É—Å—Ç.")
        return
    text = f"üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}\n\n"
    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –∏–Ω—Ñ–æ–π, –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–º–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
    for sub_id in subscribers:
        user_log = os.path.join(USERS_DIR, f"{sub_id}.txt")
        if exists(user_log):
            with open(user_log, "r", encoding="utf-8") as f:
                first_line = f.readline()
                name_info = first_line.split('|')[1].strip() if '|' in first_line else "Unknown"
        else:
            name_info = "Unknown"
        text += f"ID: {sub_id} | {name_info}\n"
    await update.message.reply_text(text)

async def admin_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id not in admins:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    args = context.args
    if not args:
        await update.message.reply_text("‚Ñπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin_logs <user_id>")
        return
    target_id = args[0]
    log_user_action(user, f"–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")
    user_log = os.path.join(USERS_DIR, f"{target_id}.txt")
    if not exists(user_log):
        await update.message.reply_text("‚ùå –õ–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    with open(user_log, "r", encoding="utf-8") as f:
        content = f.read()
    # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Ñ–∞–π–ª, –∏–Ω–∞—á–µ —Ç–µ–∫—Å—Ç–æ–º
    if len(content) > 4000:
        await update.message.reply_document(document=content.encode('utf-8'), filename=f"user_{target_id}_log.txt")
    else:
        await update.message.reply_text(f"<pre>{content}</pre>", parse_mode='HTML')

async def admin_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id not in admins:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    log_user_action(user, "–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∞–¥–º–∏–Ω)")
    await update.message.reply_text("üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º...")
    await notify_all(context)

async def notify_all(context: ContextTypes.DEFAULT_TYPE):
    for user_id in subscribers:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üî¥ –°—Ç—Ä–∏–º –Ω–∞—á–∞–ª—Å—è!\n‚û° https://www.twitch.tv/{TWITCH_USER_LOGIN}"
            )
            dummy_user = type("User", (), {"id": user_id, "full_name": "Unknown", "username": "unknown"})
            log_user_action(dummy_user, "üì¢ –ü–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç—Ä–∏–º–µ")
        except Exception as e:
            dummy_user = type("User", (), {"id": user_id, "full_name": "Unknown", "username": "unknown"})
            log_user_action(dummy_user, f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç—Ä–∏–º–∞
async def stream_monitor(application):
    token = get_twitch_token()
    stream_was_live = False
    while True:
        try:
            live = is_stream_live(token)
            if live and not stream_was_live:
                logging.info("–°—Ç—Ä–∏–º –∑–∞–ø—É—Å—Ç–∏–ª—Å—è ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
                await notify_all(application)
            stream_was_live = live
        except Exception as e:
            logging.error(f"[stream_monitor] –û—à–∏–±–∫–∞: {e}")
        await asyncio.sleep(CHECK_INTERVAL)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∑–∞–¥ –∏–∑ –∞–¥–º–∏–Ω –º–µ–Ω—é
async def back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    subscribed = user.id in subscribers
    is_admin = user.id in admins
    log_user_action(user, "–í–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await update.message.reply_text("‚¨á –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_keyboard(subscribed, is_admin))

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == '__main__':
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s | %(levelname)s | %(message)s'
    )
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("status", status_command))
    app.add_handler(CommandHandler("admin_list", admin_list))
    app.add_handler(CommandHandler("admin_logs", admin_logs))
    app.add_handler(CommandHandler("admin_notify", admin_notify))
    app.add_handler(MessageHandler(filters.Regex('^‚¨Ö –ù–∞–∑–∞–¥$'), back_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    loop = asyncio.get_event_loop()
    loop.create_task(stream_monitor(app))
    app.run_polling()
